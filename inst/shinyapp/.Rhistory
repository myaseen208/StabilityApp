stop("q must be 1, 2 or 3, got q=", q, ".")
}
# Form pools and optionally reorder
pools <- future_map(1:n, function(i) factors[(i - 1) %% length(factors) + 1], .options = furrr_options(seed = TRUE))
if (reorder) {
nfactors <- choose(m, q)
pools <- unlist(lapply(1:nfactors, function(i) pools[i:nfactors:length(pools)]), recursive = FALSE)
}
# Filter out empty pools
pools <- pools[sapply(pools, length) > 0]
# Convert to pool indices and create sparse array
poolidx <- lapply(pools, function(pool) sapply(pool, function(num) if (inherits(num, "GFElem")) num$value + 1 else m))
# Debugging prints
cat("Length of poolidx:", length(poolidx), "\n")
cat("Lengths of each pool in poolidx:", sapply(poolidx, length), "\n")
# Ensure poolidx is not empty
if (length(poolidx) == 0) {
stop("poolidx is empty after processing.")
}
# Flatten poolidx and generate indices
i <- unlist(poolidx)
j <- rep(seq_len(n), each = q, length.out = length(i))  # Ensure correct length
# Debugging prints
cat("Length of i:", length(i), "\n")
cat("Length of j:", length(j), "\n")
cat("NA values in i:", sum(is.na(i)), "\n")
cat("NA values in j:", sum(is.na(j)), "\n")
if (any(is.na(i)) || any(is.na(j))) {
stop("NA values detected in i or j")
}
return(sparseMatrix(i = i, j = j, x = rep(1, length(i)), dims = c(m, n)))
}
# Example usage
n <- 10
m <- 6
q <- 2
result <- HyperDesign(n, m, q)
print(result)
HyperDesign(n = 10, m = 6, q = 2)
library(future)
plan(strategy = multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
library(stringr)
dt1 <-
installed.packages() |>
as.data.table() |>
fselect(Package, InstalledVersion = Version) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
as.data.table() |>
fselect(Package, CRANVersion = Version) |>
roworder(Package)
dt2
githubPackages <-
github_update(auto.install = FALSE) %>%
as.data.table() %>%
frename(package = Package)
dt12 <-
reduce(
.x = list(dt1, dt2, githubPackages)
, .f = left_join
, by = "Package"
) %>%
fselect(Package, InstalledVersion, CRANVersion, gh_version = 6) %>%
as.data.table() %>%
fsubset(is.na(gh_version)) %>%
# fsubset(InstalledVersion != CRANVersion) %>%
fmutate(
InstalledVersion = as.numeric(str_remove_all(string = InstalledVersion, pattern = "(?<=\\..{0,10})\\.|-"))
, CRANVersion      = as.numeric(str_remove_all(string = CRANVersion, pattern = "(?<=\\..{0,10})\\.|-"))
) %>%
fsubset(InstalledVersion < CRANVersion) %>%
funique()
dt12
pkg_install(
pkg          = dt12 |>
# fsubset(Package %notin% c("MASS", "boot", "nlme")) |>
pull(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
pkg_install(
pkg          = dt12 |>
# fsubset(Package %notin% c("MASS", "boot", "nlme")) |>
pull(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
221/sqrt(50)*1.645
5000 + 221/sqrt(50)*1.645
5000 + 221/sqrt(50)*1.645
5000 - 221/sqrt(50)*1.645
Barrels <- c(4.8, 5.4, 3.9, 4.9, 5.5)
?t.test
t.test(
x = c(4.8, 5.4, 3.9, 4.9, 5.5),
alternative = c("two.sided", "less", "greater")[3],
mu = 4.5
, conf.level = 0.95
)
?qnorm
dnorm(0) == 1/sqrt(2*pi)
pnorm(q = 1.96, mean = 0, sd = 1)
pnorm(q = -1.96, mean = 0, sd = 1)
pnorm(q = 1.645, mean = 0, sd = 1)
1- qnorm(p = 0.05, mean = 0, sd = 1)
qnorm(p = 0.05, mean = 0, sd = 1)
qnorm(p = 0.05, mean = 0, sd = 1, lower.tail = FALSE)
source("~/.active-rstudio-document")
pnorm(p = 1.645, mean = 0, sd = 1, lower.tail = FALSE)
pnorm(x = 1.645, mean = 0, sd = 1, lower.tail = FALSE)
pnorm(q = 1.645, mean = 0, sd = 1, lower.tail = FALSE)
pnorm(q = 3.20, mean = 0, sd = 1, lower.tail = FALSE)
pnorm(q = 1.645, mean = 0, sd = 1)
5000 + 1.645*221/sqrt(50)
##----Example4----
qnorm(p = 0.05, mean = 0, sd = 1, lower.tail = TRUE)
pnorm(q = -1.645, mean = 0, sd = 1, lower.tail = TRUE)
pnorm(q = -5, mean = 0, sd = 1, lower.tail = TRUE)
LCL <- 60 - 1.645*0.2/sqrt(100)
LCL
6 - 1.645*0.2/sqrt(100)
-0.1*0.2/sqrt(100)
-0.1/0.2/sqrt(100)
-0.1/0.2*sqrt(100)
5.9 - 1.645*0.2/sqrt(100)
5.9 - 1.645*0.2/sqrt(100)
5.9 - 1.645*0.2/sqrt(100)
qnorm(p = 0.05/2, mean = 0, sd = 1, lower.tail = TRUE)
pnorm(q = -1.96, mean = 0, sd = 1, lower.tail = TRUE)
2*pnorm(q = -1.96, mean = 0, sd = 1, lower.tail = TRUE)
2*pnorm(q = -1.65, mean = 0, sd = 1, lower.tail = TRUE)
pnorm(q = -1.65, mean = 0, sd = 1, lower.tail = TRUE)
1087 - 1.96*120/sqrt(6)
1087 + 1.96*120/sqrt(6)
5.9 - 1.645*0.2/sqrt(100)
5000 + 1.645*221/sqrt(50)
5.9 - 1.645*0.2/sqrt(100)
1087 - 1.96*120/sqrt(6)
1087 + 1.96*120/sqrt(6)
t.test(
x = c(4.8, 5.4, 3.9, 4.9, 5.5),
alternative = c("two.sided", "less", "greater")[3],
mu = 4.5
, conf.level = 0.95
)
5000 - 1.645*221/sqrt(50)
5.9 + 1.645*0.2/sqrt(100)
##----Example6----
t.test(
x = c(4.8, 5.4, 3.9, 4.9, 5.5),
alternative = c("two.sided", "less", "greater")[3],
mu = 4.5
, conf.level = 0.95
)
qt(p = 0.05, df = 4, lower.tail = FALSE)
pt(q = 2.13, df = 4, lower.tail = FALSE)
pt(q = 1.4055, df = 4, lower.tail = FALSE)
mean(c(4.8, 5.4, 3.9, 4.9, 5.5))
sd(c(4.8, 5.4, 3.9, 4.9, 5.5))
4.9 - 2.13*0.6364/sqrt(5)
##----Example6----
t.test(
x = c(4.8, 5.4, 3.9, 4.9, 5.5),
alternative = c("two.sided", "less", "greater")[3],
mu = 4.5
, conf.level = 0.95
)
##----Example5----
qt(p = 0.10, df = 24, lower.tail = TRUE)
pt(q = -1.318, df = 24, lower.tail = TRUE)
pt(q = -1.00, df = 24, lower.tail = TRUE)
89 + 1.318*20/sqrt(25)
##----Example8----
t.test(
x = 2.0, 2.4, 1.7, 1.9, 2.8, 1.8,
alternative = c("two.sided", "less", "greater")[1],
mu = 2.3
, conf.level = 0.95
)
##----Example8----
t.test(
x = c(2.0, 2.4, 1.7, 1.9, 2.8, 1.8),
alternative = c("two.sided", "less", "greater")[1],
mu = 2.3
, conf.level = 0.95
)
qt(p = 0.05/2, df = 5, lower.tail = TRUE)
2*pt(q = -2.57, df = 5, lower.tail = TRUE)
2*pt(q = -1.1677, df = 5, lower.tail = TRUE)
##----Example8----
t.test(
x = c(2.0, 2.4, 1.7, 1.9, 2.8, 1.8),
alternative = c("two.sided", "less", "greater")[1],
mu = 2.3
, conf.level = 0.95
)
mean(c(2.0, 2.4, 1.7, 1.9, 2.8, 1.8))
sd(c(2.0, 2.4, 1.7, 1.9, 2.8, 1.8))
2.1 - 2.57*0.42/sqrt(6)
2.1 + 2.57*0.42/sqrt(6)
##----Example8----
t.test(
x = c(2.0, 2.4, 1.7, 1.9, 2.8, 1.8),
alternative = c("two.sided", "less", "greater")[1],
mu = 2.3
, conf.level = 0.95
)
library(pak)
pkg_install("yihui/litedown")
library(litedown)
library(help = litedown)
?litedown
shiny::runApp('Test')
getwd()
pnorm(q = 3.20, mean = 0, sd = 1, lower.tail = FALSE)
pnorm(q = -5, mean = 0, sd = 1, lower.tail = TRUE)
2*pnorm(q = -1.65, mean = 0, sd = 1, lower.tail = TRUE)
##----Example6----
t.test(
x = c(4.8, 5.4, 3.9, 4.9, 5.5),
alternative = c("two.sided", "less", "greater")[3],
mu = 4.5
, conf.level = 0.95
)
pt(q = 1.4055, df = 4, lower.tail = FALSE)
pt(q = -1.00, df = 24, lower.tail = TRUE)
2*pt(q = -1.1677, df = 5, lower.tail = TRUE)
library(PakPC)
PakPC()
PakPC()
library(future)
plan(strategy = multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
library(stringr)
dt1 <-
installed.packages() |>
as.data.table() |>
fselect(Package, InstalledVersion = Version) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
as.data.table() |>
fselect(Package, CRANVersion = Version) |>
roworder(Package)
dt2
githubPackages <-
github_update(auto.install = FALSE) %>%
as.data.table() %>%
frename(package = Package)
dt12 <-
reduce(
.x = list(dt1, dt2, githubPackages)
, .f = left_join
, by = "Package"
) %>%
fselect(Package, InstalledVersion, CRANVersion, gh_version = 6) %>%
as.data.table() %>%
fsubset(is.na(gh_version)) %>%
# fsubset(InstalledVersion != CRANVersion) %>%
fmutate(
InstalledVersion = as.numeric(str_remove_all(string = InstalledVersion, pattern = "(?<=\\..{0,10})\\.|-"))
, CRANVersion      = as.numeric(str_remove_all(string = CRANVersion, pattern = "(?<=\\..{0,10})\\.|-"))
) %>%
fsubset(InstalledVersion < CRANVersion) %>%
funique()
dt12
dt13 <-
dt12 |>
fsubset(Package %notin% c("haven", "RcppEigen", "glmmTMB", "nlme"))
nrow(dt13)
pkg_install(c(dt13[1:25, 1]$Package))
pkg_install(c(dt13[1:10, 1]$Package))
pkg_install(c(dt13[11:15, 1]$Package))
pkg_install(c(dt13[16:20, 1]$Package))
pkg_install(c(dt13[21:24, 1]$Package))
pkg_install(c(dt13[26:30, 1]$Package))
pkg_install(c(dt13[31:50, 1]$Package))
pkg_install(c(dt13[51:90, 1]$Package))
pkg_install(c(dt13[91:110, 1]$Package))
pkg_install(c(dt13[91:100, 1]$Package))
pkg_install(c(dt13[101:105, 1]$Package))
pkg_install(c(dt13[106:108, 1]$Package))
pkg_install(c(dt13[109:110, 1]$Package))
pkg_install(c(dt13[109, 1]$Package))
pkg_install(c(dt13[110, 1]$Package))
pkg_install(c(dt13[111:120, 1]$Package))
pkg_install(c(dt13[121:130, 1]$Package))
pkg_install(c(dt13[131:140, 1]$Package))
pkg_install(c(dt13[141:150, 1]$Package))
pkg_install(c(dt13[151:160, 1]$Package))
pkg_install(c(dt13[161:166, 1]$Package))
pkg_install(c(dt13[161:164, 1]$Package))
nrow(dt13)
pkg_install(c(dt13[161:164, 1]$Package))
library(future)
plan(strategy = multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
library(stringr)
dt1 <-
installed.packages() |>
as.data.table() |>
fselect(Package, InstalledVersion = Version) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
as.data.table() |>
fselect(Package, CRANVersion = Version) |>
roworder(Package)
dt2
githubPackages <-
github_update(auto.install = FALSE) %>%
as.data.table() %>%
frename(package = Package)
dt12 <-
reduce(
.x = list(dt1, dt2, githubPackages)
, .f = left_join
, by = "Package"
) %>%
fselect(Package, InstalledVersion, CRANVersion, gh_version = 6) %>%
as.data.table() %>%
fsubset(is.na(gh_version)) %>%
# fsubset(InstalledVersion != CRANVersion) %>%
fmutate(
InstalledVersion = as.numeric(str_remove_all(string = InstalledVersion, pattern = "(?<=\\..{0,10})\\.|-"))
, CRANVersion      = as.numeric(str_remove_all(string = CRANVersion, pattern = "(?<=\\..{0,10})\\.|-"))
) %>%
fsubset(InstalledVersion < CRANVersion) %>%
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("RcppEigen", "glmmTMB", "nlme")) |>
pull(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
dt13 <-
dt12 |>
fsubset(Package %notin% c("haven", "RcppEigen", "glmmTMB", "nlme"))
nrow(dt13)
install.packages("haven")
library(future)
plan(strategy = multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
library(stringr)
dt1 <-
installed.packages() |>
as.data.table() |>
fselect(Package, InstalledVersion = Version) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
as.data.table() |>
fselect(Package, CRANVersion = Version) |>
roworder(Package)
dt2
githubPackages <-
github_update(auto.install = FALSE) %>%
as.data.table() %>%
frename(package = Package)
dt12 <-
reduce(
.x = list(dt1, dt2, githubPackages)
, .f = left_join
, by = "Package"
) %>%
fselect(Package, InstalledVersion, CRANVersion, gh_version = 6) %>%
as.data.table() %>%
fsubset(is.na(gh_version)) %>%
# fsubset(InstalledVersion != CRANVersion) %>%
fmutate(
InstalledVersion = as.numeric(str_remove_all(string = InstalledVersion, pattern = "(?<=\\..{0,10})\\.|-"))
, CRANVersion      = as.numeric(str_remove_all(string = CRANVersion, pattern = "(?<=\\..{0,10})\\.|-"))
) %>%
fsubset(InstalledVersion < CRANVersion) %>%
funique()
dt12
pkg_install(
pkg          = dt12 |>
# fsubset(Package %notin% c("RcppEigen", "glmmTMB", "nlme")) |>
pull(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
setwd("/media/myaseen208/Documents1/MYaseen208/Consultancy/Mr._M._Yaseen/2017-09-14RPackages/HyperDesignShiny/HyperDesignShiny/inst/HyperDesignShiny")
shinyApp(ui = ui, server = server)
source("server.R")
source("ui.R")
shinyApp(ui = ui, server = server)
source("server.R")
source("ui.R")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source("ui.R")
shinyApp(ui = ui, server = server)
source("server.R")
source("ui.R")
shinyApp(ui = ui, server = server)
library(HyperDesign)
?HyperDesign
source("server.R")
source("ui.R")
shinyApp(ui = ui, server = server)
source("server.R")
source("ui.R")
shinyApp(ui = ui, server = server)
source("ui.R")
shinyApp(ui = ui, server = server)
source("ui.R")
shinyApp(ui = ui, server = server)
source("ui.R")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(stability)
library(pak)
pkg_install("stability")
library(stability)
library(help =stability)
